[variable_params]
mass1 =
mass2 =
spin1_a = 
spin1_azimuthal = 
spin1_polar = 
spin2_a = 
spin2_azimuthal = 
spin2_polar = 

; alpha = vmax 
; alpha1 = duration
;alpha2 = eccentricity 
vmax = 
eccentricity =

coa_phase = 
inclination = 
; comoving_volume = 
polarization = 
chirp_distance =

[static_params]
approximant = Hyperbolic15PNhphc
f_lower = 20
f_ref = 20
duration = 8

[prior-mass1]
name = uniform
min-mass1 = 0.1
max-mass1 = 100

[prior-mass2]
name = uniform
min-mass2 = 0.1
max-mass2 = 100

; alpha2 = eccentricity
[prior-eccentricity]
name = uniform
min-eccentricity = 1.0
max-eccentricity = 2.0

; alpha = vmax
[prior-vmax]
name = uniform
min-vmax = 0.1
max-vmax = 0.3

[prior-spin1_a]
name = uniform
min-spin1_a = 0.0
max-spin1_a = 0.99

[prior-spin1_polar+spin1_azimuthal]
name = uniform_solidangle
polar-angle = spin1_polar
azimuthal-angle = spin1_azimuthal

[prior-spin2_a]
name = uniform
min-spin2_a = 0.0
max-spin2_a = 0.99

[prior-spin2_polar+spin2_azimuthal]
name = uniform_solidangle
polar-angle = spin2_polar
azimuthal-angle = spin2_azimuthal

[waveform_transforms-spin1x+spin1y+spin1z]
name = spherical_to_cartesian
x = spin1x
y = spin1y
z = spin1z
radial = spin1_a
polar = spin1_polar
azimuthal = spin1_azimuthal

[waveform_transforms-spin2x+spin2y+spin2z]
name = spherical_to_cartesian
x = spin2x
y = spin2y
z = spin2z
radial = spin2_a
polar = spin2_polar
azimuthal = spin2_azimuthal

[prior-coa_phase]
name = uniform_angle

[prior-inclination]
name = sin_angle

[prior-polarization]
name = uniform_angle

; [prior-comoving_volume]
; name = uniform
; min-comoving_volume = 5e3
; max-comoving_volume = 812000000

; [waveform_transforms-redshift]
; name = custom
; inputs = comoving_volume
; redshift = redshift_from_comoving_volume(comoving_volume)

; [waveform_transforms-distance]
; name = custom
; inputs = comoving_volume
; distance = distance_from_comoving_volume(comoving_volume)

[prior-chirp_distance]
name = uniform_radius
min-chirp_distance = 20
max-chirp_distance = 400

; fix me:
[waveform_transforms-distance]
name = chirp_distance_to_distance

[waveform_transforms-redshift]
name = custom
inputs = distance
redshift = redshift(distance)

[waveform_transforms-mchirp]
name = custom
inputs = mass1, mass2
mchirp = conv.mchirp_from_mass1_mass2(mass1, mass2)


[waveform_transforms-tau0]
name = custom
inputs = mass1, mass2, f_lower
tau0 = conv.tau0_from_mass1_mass2(mass1, mass2, f_lower)
